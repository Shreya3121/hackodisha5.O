<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SplitWise - Frontend Only</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #A6E1F6; /* Light Blue background */
            color: #4B5563; /* Dark Gray for better contrast */
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        /* Custom styles for better aesthetics */
        .card {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
            border-radius: 12px;
            background-color: #FFFDD0; /* Light Yellow for the cards */
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2), 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        input, select, button {
            border-radius: 8px;
            color: #1f2937;
        }
        .tab-button {
            transition: all 0.3s ease;
            transform: scale(1);
        }
        .tab-button.active {
            color: #1E40AF; /* Darker blue for active state */
            border-bottom: 3px solid #1E40AF;
            transform: scale(1.05);
            font-weight: 600;
        }
        .button-primary {
            background-color: #1E40AF;
            color: white;
            padding: 12px 24px;
            font-weight: 600;
            transition: background-color 0.3s;
        }
        .button-primary:hover {
            background-color: #1E3A8A;
        }
        .receipt-token {
            background-color: #3B82F6; /* Blue for not tokenized */
            color: white;
            padding: 4px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        .tokenized {
            background-color: #10B981; /* Vibrant green for tokenized */
            color: white;
        }
        .notification-bar {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #4B5563; /* Darker gray */
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.5s ease, visibility 0.5s ease;
        }
        .notification-bar.show {
            opacity: 1;
            visibility: visible;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center p-4 sm:p-6">

    <div class="max-w-6xl w-full bg-white card p-6 sm:p-8 space-y-6">
        <!-- Header -->
        <header class="flex flex-col sm:flex-row justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-gray-800">SplitWise</h1>
            <div id="user-info" class="text-sm text-gray-500 mt-2 sm:mt-0">
                <span>User ID: </span><span id="user-id">FRONTEND-USER-123</span>
            </div>
        </header>

        <!-- Notification Bar -->
        <div id="notification-bar" class="notification-bar"></div>

        <!-- Navigation Tabs -->
        <div class="flex border-b border-gray-300">
            <button id="tab-dashboard" class="tab-button flex-1 py-4 text-center text-gray-500 hover:text-gray-800 border-b-2 border-transparent active">Dashboard</button>
            <button id="tab-add-expense" class="tab-button flex-1 py-4 text-center text-gray-500 hover:text-gray-800 border-b-2 border-transparent">Add Expense</button>
            <button id="tab-budget" class="tab-button flex-1 py-4 text-center text-gray-500 hover:text-gray-800 border-b-2 border-transparent">Budget</button>
        </div>

        <!-- Dashboard View -->
        <div id="view-dashboard" class="space-y-6">
            <h2 class="text-2xl font-semibold text-gray-800">Recent Expenses</h2>
            <ul id="expenses-list" class="space-y-4">
                <li class="p-6 text-center text-gray-500">No expenses yet. Add a new one to get started!</li>
            </ul>
        </div>

        <!-- Add Expense View -->
        <div id="view-add-expense" class="hidden">
            <h2 class="text-2xl font-semibold text-gray-800">Add New Expense</h2>
            <form id="add-expense-form" class="space-y-4 mt-4">
                <div>
                    <label for="description" class="block text-sm font-medium text-gray-500">Description</label>
                    <input type="text" id="description" class="mt-1 block w-full p-2 border border-gray-300 bg-white text-gray-900 focus:ring-blue-500 focus:border-blue-500" required>
                </div>
                <div>
                    <label for="amount" class="block text-sm font-medium text-gray-500">Amount (₹)</label>
                    <input type="number" step="0.01" id="amount" class="mt-1 block w-full p-2 border border-gray-300 bg-white text-gray-900 focus:ring-blue-500 focus:border-blue-500" required>
                </div>
                <div>
                    <label for="split-method" class="block text-sm font-medium text-gray-500">Split Method</label>
                    <select id="split-method" class="mt-1 block w-full p-2 border border-gray-300 bg-white text-gray-900 focus:ring-blue-500 focus:border-blue-500">
                        <option value="even">Split Evenly</option>
                        <option value="custom">Split by Custom Amounts</option>
                    </select>
                </div>
                <div id="participants-container">
                    <label for="participants" class="block text-sm font-medium text-gray-500">Participants (comma-separated IDs)</label>
                    <input type="text" id="participants" class="mt-1 block w-full p-2 border border-gray-300 bg-white text-gray-900 focus:ring-blue-500 focus:border-blue-500" required value="subhadrika,shreya,sunanda,ananya">
                </div>
                <div id="custom-split-container" class="hidden">
                    <label class="block text-sm font-medium text-gray-500">Custom Splits</label>
                    <div id="custom-split-inputs" class="space-y-2 mt-2"></div>
                </div>
                <div>
                    <label for="paid-by" class="block text-sm font-medium text-gray-500">Paid By (Participant ID)</label>
                    <select id="paid-by" class="mt-1 block w-full p-2 border border-gray-300 bg-white text-gray-900 focus:ring-blue-500 focus:border-blue-500" required>
                        <!-- Options will be populated by JavaScript -->
                    </select>
                </div>
                <div class="flex items-center">
                    <input type="checkbox" id="is-shared" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 bg-white">
                    <label for="is-shared" class="ml-2 block text-sm text-gray-900">Is this a shared expense?</label>
                </div>
                <div class="flex justify-between items-center">
                    <button type="submit" class="button-primary px-6 py-3">Add Expense</button>
                    <button type="button" id="tokenize-receipt" class="button-primary bg-blue-600 hover:bg-blue-700 px-6 py-3">Tokenize Receipt</button>
                </div>
            </form>
        </div>

        <!-- Budget Prediction View -->
        <div id="view-budget" class="hidden">
            <h2 class="text-2xl font-semibold text-gray-800">Budget Prediction</h2>
            <div id="budget-summary" class="mt-4 p-4 bg-yellow-100 rounded-lg text-gray-800">
                <p><strong>Predicted Monthly Spending:</strong> <span id="predicted-spending">₹0.00</span></p>
            </div>
            <div id="budget-details" class="mt-6 space-y-4">
                <h3 class="text-lg font-medium text-gray-500">Predicted Spending by Category</h3>
                <ul id="budget-list" class="space-y-2">
                    <li class="text-gray-500">Run prediction to see details.</li>
                </ul>
            </div>
            <button id="run-prediction-btn" class="button-primary mt-6">Run Prediction</button>
        </div>
    </div>

    <!-- Frontend-only JavaScript -->
    <script>
        // --- Global State Variables ---
        let expenses = [];
        const userId = 'FRONTEND-USER-123';

        // --- UI Helper Functions ---
        // Function to show a temporary notification bar at the top of the screen
        function showNotification(message) {
            const notificationBar = document.getElementById('notification-bar');
            notificationBar.textContent = message;
            notificationBar.classList.add('show');
            setTimeout(() => {
                notificationBar.classList.remove('show');
            }, 3000);
        }

        // --- Tab Navigation Logic ---
        const views = {
            'dashboard': document.getElementById('view-dashboard'),
            'add-expense': document.getElementById('view-add-expense'),
            'budget': document.getElementById('view-budget')
        };
        const tabs = {
            'dashboard': document.getElementById('tab-dashboard'),
            'add-expense': document.getElementById('tab-add-expense'),
            'budget': document.getElementById('tab-budget')
        };

        // Switches the active view and tab
        function switchView(viewName) {
            for (const view in views) {
                views[view].classList.add('hidden');
                tabs[view].classList.remove('active');
            }
            views[viewName].classList.remove('hidden');
            tabs[viewName].classList.add('active');
        }

        // Add event listeners to all navigation tabs
        Object.keys(tabs).forEach(key => {
            tabs[key].addEventListener('click', () => switchView(key));
        });

        // --- Expense Logic ---
        // Keywords for a basic auto-categorization
        const categoryKeywords = {
            'Food & Dining': ['restaurant', 'cafe', 'coffee', 'food', 'dine', 'eat', 'dinner'],
            'Groceries': ['grocery', 'supermarket', 'market', 'store'],
            'Transport': ['gas', 'fuel', 'bus', 'train', 'taxi', 'uber', 'lyft'],
            'Utilities': ['electricity', 'water', 'internet', 'rent', 'bill'],
            'Entertainment': ['movie', 'concert', 'game', 'show', 'ticket'],
            'Shopping': ['shop', 'clothes', 'online', 'amazon', 'mall'],
            'Health': ['pharmacy', 'doctor', 'meds', 'hospital'],
            'Travel': ['flight', 'hotel', 'trip', 'vacation', 'travel']
        };

        // Determines the category of an expense based on its description
        function getCategory(description) {
            const lowerDesc = description.toLowerCase();
            for (const category in categoryKeywords) {
                if (categoryKeywords[category].some(keyword => lowerDesc.includes(keyword))) {
                    return category;
                }
            }
            return 'Other';
        }

        // Renders the list of expenses on the dashboard
        function renderExpenses() {
            const list = document.getElementById('expenses-list');
            list.innerHTML = ''; // Clear the list before rendering

            if (expenses.length === 0) {
                list.innerHTML = `<li class="p-6 text-center text-gray-500">No expenses yet. Add a new one to get started!</li>`;
                return;
            }

            // Sort expenses by date, most recent first
            expenses.sort((a, b) => b.date - a.date);

            expenses.forEach(expense => {
                const li = document.createElement('li');
                li.className = 'card p-4 sm:p-6 flex flex-col sm:flex-row justify-between items-start sm:items-center';
                const splitAmount = expense.splitMethod === 'even' ? (expense.amount / expense.participants.length).toFixed(2) : 'Custom';
                
                // Creates a list of participants and their split amounts for display
                const participantDetails = expense.participants.map(p => {
                    let cost = expense.splitMethod === 'even' ? splitAmount : (expense.customSplits?.[p] || 0).toFixed(2);
                    return `<span class="bg-gray-200 text-gray-800 px-2 py-1 rounded-full text-xs font-semibold">${p.substring(0, 5)}...: ₹${cost}</span>`;
                }).join(' ');

                // Populate the list item with expense details and a delete button
                li.innerHTML = `
                    <div class="flex-grow">
                        <h3 class="text-lg font-semibold text-gray-800">${expense.description}</h3>
                        <p class="text-sm text-gray-500 mt-1">
                            <span class="font-medium">₹${parseFloat(expense.amount).toFixed(2)}</span> spent on
                            <span class="font-medium">${new Date(expense.date).toLocaleDateString()}</span>
                        </p>
                        <div class="text-sm text-gray-500 mt-1 flex flex-wrap gap-2">
                             Paid by: <span class="font-medium text-gray-800">${expense.paidBy.substring(0, 5)}...</span>
                             <div class="flex flex-wrap gap-1 mt-1">
                                ${participantDetails}
                             </div>
                        </div>
                    </div>
                    <div class="mt-4 sm:mt-0 flex flex-col sm:flex-row items-start sm:items-center gap-2">
                        <span class="receipt-token ${expense.isTokenized ? 'tokenized' : ''}">
                            ${expense.isTokenized ? 'Tokenized' : 'Not Tokenized'}
                        </span>
                        <div class="flex items-center gap-2 mt-2 sm:mt-0">
                            <button class="bg-red-700 hover:bg-red-800 text-white p-2 rounded-full text-sm delete-btn" data-id="${expense.id}">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </div>
                    </div>
                `;
                list.appendChild(li);
            });
        }

        // --- Budget Prediction Logic ---
        function runBudgetPrediction() {
            if (expenses.length === 0) {
                document.getElementById('budget-list').innerHTML = `<li class="text-gray-500">Add some expenses first to run a prediction.</li>`;
                document.getElementById('predicted-spending').textContent = '₹0.00';
                return;
            }

            const today = new Date();
            const threeMonthsAgo = new Date(today.getFullYear(), today.getMonth() - 3, today.getDate());

            // Filter for expenses in the last 3 months
            const recentExpenses = expenses.filter(e => {
                return new Date(e.date) >= threeMonthsAgo;
            });

            if (recentExpenses.length === 0) {
                document.getElementById('budget-list').innerHTML = `<li class="text-gray-500">Not enough recent data.</li>`;
                document.getElementById('predicted-spending').textContent = '₹0.00';
                return;
            }

            const monthlySpendings = {};
            const categorySpendings = {};

            // Calculate total spending per month and per category
            recentExpenses.forEach(e => {
                const date = new Date(e.date);
                const month = date.getFullYear() + '-' + date.getMonth();
                monthlySpendings[month] = (monthlySpendings[month] || 0) + e.amount;
                categorySpendings[e.category] = (categorySpendings[e.category] || 0) + e.amount;
            });

            // Predict average monthly spending
            const totalRecentSpending = Object.values(monthlySpendings).reduce((sum, amount) => sum + amount, 0);
            const averageMonthlySpending = totalRecentSpending / Object.keys(monthlySpendings).length;

            document.getElementById('predicted-spending').textContent = `₹${averageMonthlySpending.toFixed(2)}`;

            // Render predicted spending per category
            const budgetList = document.getElementById('budget-list');
            budgetList.innerHTML = '';
            for (const category in categorySpendings) {
                const averageCategorySpend = categorySpendings[category] / Object.keys(monthlySpendings).length;
                const li = document.createElement('li');
                li.className = 'flex justify-between items-center bg-yellow-100 p-4 rounded-md shadow-sm';
                li.innerHTML = `
                    <span class="text-gray-800 font-medium">${category}</span>
                    <span class="text-yellow-600 font-semibold">₹${averageCategorySpend.toFixed(2)}</span>
                `;
                budgetList.appendChild(li);
            }
        }

        // --- Form Interaction Logic ---
        // Dynamically populates the "Paid By" dropdown with participants
        function updatePaidByDropdown() {
            const participantsInput = document.getElementById('participants').value;
            const participants = participantsInput.split(',').map(p => p.trim()).filter(p => p !== '');
            const paidBySelect = document.getElementById('paid-by');
            paidBySelect.innerHTML = ''; // Clear existing options

            if (participants.length > 0) {
                participants.forEach(p => {
                    const option = document.createElement('option');
                    option.value = p;
                    option.textContent = p;
                    paidBySelect.appendChild(option);
                });
            } else {
                paidBySelect.innerHTML = `<option value="">Enter participants first</option>`;
            }
        }

        // Dynamically creates input fields for custom splits
        function updateCustomSplitInputs() {
            const participantsInput = document.getElementById('participants').value;
            const participants = participantsInput.split(',').map(p => p.trim()).filter(p => p !== '');
            const customSplitInputsDiv = document.getElementById('custom-split-inputs');
            customSplitInputsDiv.innerHTML = '';
            if (participants.length > 0) {
                participants.forEach(p => {
                    const div = document.createElement('div');
                    div.className = 'flex items-center space-x-2';
                    div.innerHTML = `
                        <label class="text-gray-500 text-sm">${p.substring(0, 5)}...</label>
                        <input type="number" step="0.01" data-participant="${p}" placeholder="Amount for ${p.substring(0,5)}..." class="flex-1 p-2 border border-gray-300 bg-white text-gray-900 focus:ring-blue-500 focus:border-blue-500">
                    `;
                    customSplitInputsDiv.appendChild(div);
                });
            } else {
                customSplitInputsDiv.innerHTML = `<p class="text-sm text-gray-500">Enter participants to define custom splits.</p>`;
            }
        }

        // --- Event Listeners ---
        // Handles form submission to add a new expense
        document.getElementById('add-expense-form').addEventListener('submit', (e) => {
            e.preventDefault();

            // Collect form data
            const description = document.getElementById('description').value;
            const amount = parseFloat(document.getElementById('amount').value);
            const splitMethod = document.getElementById('split-method').value;
            const participantsInput = document.getElementById('participants').value;
            const paidBy = document.getElementById('paid-by').value;
            const isShared = document.getElementById('is-shared').checked;

            // Basic validation
            if (isNaN(amount) || amount <= 0) {
                showNotification("Please enter a valid amount.");
                return;
            }
            
            const participants = participantsInput.split(',').map(p => p.trim()).filter(p => p !== '');
            if (participants.length === 0) {
                 showNotification("Please enter at least one participant.");
                 return;
            }
            if (!isShared && participants.length > 1) {
                showNotification("Only shared expenses can have multiple participants.");
                return;
            }

            const category = getCategory(description);
            let customSplits = {};
            if (splitMethod === 'custom') {
                const customInputs = document.querySelectorAll('#custom-split-inputs input');
                customInputs.forEach(input => {
                    const participantId = input.dataset.participant;
                    const splitAmount = parseFloat(input.value);
                    if (!isNaN(splitAmount)) {
                        customSplits[participantId] = splitAmount;
                    }
                });
                const totalCustomSplit = Object.values(customSplits).reduce((sum, val) => sum + val, 0);
                if (Math.abs(totalCustomSplit - amount) > 0.01) {
                    showNotification("Custom splits must add up to the total amount.");
                    return;
                }
            }

            // Create new expense object
            const newExpense = {
                id: Date.now().toString(),
                description,
                amount,
                date: new Date(),
                category,
                splitMethod,
                participants,
                paidBy,
                isShared,
                isTokenized: false,
                customSplits: splitMethod === 'custom' ? customSplits : null
            };

            // Add to in-memory array and update UI
            expenses.push(newExpense);
            renderExpenses();
            showNotification("Expense added successfully!");
            document.getElementById('add-expense-form').reset();
            switchView('dashboard');
            updatePaidByDropdown();
        });

        // Event listener for changing the split method
        document.getElementById('split-method').addEventListener('change', (e) => {
            const customSplitContainer = document.getElementById('custom-split-container');
            if (e.target.value === 'custom') {
                customSplitContainer.classList.remove('hidden');
                updateCustomSplitInputs();
            } else {
                customSplitContainer.classList.add('hidden');
            }
        });

        // Event listener for updating participants and paid by dropdown
        document.getElementById('participants').addEventListener('input', () => {
            updatePaidByDropdown();
            if (document.getElementById('split-method').value === 'custom') {
                updateCustomSplitInputs();
            }
        });

        // Event listener for deleting expenses
        document.getElementById('expenses-list').addEventListener('click', (e) => {
            if (e.target.closest('.delete-btn')) {
                const btn = e.target.closest('.delete-btn');
                const docId = btn.dataset.id;
                expenses = expenses.filter(exp => exp.id !== docId);
                renderExpenses();
                showNotification("Expense deleted successfully!");
                updatePaidByDropdown();
            }
        });

        // Event listener for mock tokenization
        document.getElementById('tokenize-receipt').addEventListener('click', () => {
             showNotification("Receipt tokenization is a mock feature for this demo. It would create an immutable record of the transaction. You can now submit your expense.");
        });

        // Event listener for running the budget prediction
        document.getElementById('run-prediction-btn').addEventListener('click', runBudgetPrediction);

        // Initial setup on page load
        window.onload = () => {
            renderExpenses();
            updatePaidByDropdown(); // Initial population of the dropdown
        };
    </script>
</body>
</html>
